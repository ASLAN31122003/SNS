fork: Create a new process. 
#include <stdio.h> 
#include <unistd.h> 
int main() { 
pid_t pid = fork(); 
if (pid == 0) { 
printf("Child process: PID = %d\n", getpid()); } else if (pid > 0) { 
printf("Parent process: Child PID = %d\n", pid); } else { 
perror("fork"); 
} 
return 0; 
} 


exec: Execute a new program in the current process. 
#include <stdio.h> 
#include <unistd.h> 
int main() { 
char *args[] = {"ls", "-l", NULL}; 
execvp("ls", args); 
perror("exec"); 
return 1; 
} 


getpid: Get the process ID of the current process. 
#include <stdio.h> 
#include <unistd.h> 
int main() { 
printf("My PID: %d\n", getpid()); 
return 0; 
} 


exit: Terminate the calling process. 
#include <stdio.h> 
#include <stdlib.h> 
int main() { 
printf("Before exit\n"); 
exit(0); //Exit the program with status code 0 
printf("After exit\n"); // This line won't be reached 
return 0; 
}



wait: Wait for a child process to complete. 
#include <stdio.h> 
#include <sys/types.h> 
#include <sys/wait.h> 
#include <unistd.h> 
int main() { 
pid_t pid = fork(); 
if (pid == 0) { 
printf("Child process: PID = %d\n", getpid()); } else if (pid > 0) { 
wait(NULL); 
printf("Parent process: Child process completed\n"); } else { 
perror("fork"); 
} 
return 0; 
} 


close: Close a file descriptor. 
int main() {
int fd = open("file.txt", O_RDONLY); if (fd == -1) { 
perror("open"); 
return 1; 
} 
// Use the file descriptor... 
close(fd); // Close the file descriptor 
return 0; 
} 


stat: Get information about a file. 
#include <stdio.h> 
#include <sys/types.h> 
#include <sys/stat.h> 
#include <unistd.h> 
int main() { 
struct stat st; 
if (stat("file.txt", &st) == 0) { 
printf("File size: %ld bytes\n", st.st_size); } else { 
perror("stat"); 
return 1; 
} 
return 0; 
} 


opendir and readdir: Open and read directories. 
#include <stdio.h> 
#include <dirent.h> 
int main() { 
DIR *dir = opendir("."); 
if (dir == NULL) { 
perror("opendir"); 
return 1; 
} 
struct dirent *entry; 
while ((entry = readdir(dir)) != NULL) { printf("Name: %s\n", entry->d_name); } 
closedir(dir); 
return 0; 
}


tcp_client.c 
#include<arpa/inet.h> 
#include<stdio.h> 
#include<string.h> 
#include<sys/socket.h> 
#include<unistd.h> 
#define PORT 8080 
int main(int args,char const* argv[]) 
{ 
int sock=0,valread; 
struct sockaddr_in serv_addr; 
char* hello=" HELLO FROM CLIENT "; 
char buffer[1024]={0}; 
if((sock=socket(AF_INET,SOCK_STREAM,0))<0) 
{ 
printf("\n Socket creation error \n"); 
return -1; 
} 
serv_addr.sin_family=AF_INET; 
serv_addr.sin_port=htons(PORT); 
if(inet_pton(AF_INET,"127.0.0.1",&serv_addr.sin_addr)<=0) { 
printf("\n Invalid address/adress not supported \n"); return -1; 
} 
if(connect(sock,(struct sockaddr*)&serv_addr,sizeof(serv_addr))<0) { 
printf("\n Connection failed \n"); 
return -1; 
} 
send(sock,hello,strlen(hello),0); 
printf("Hello message sent \n"); 
valread=read(sock,buffer,1024); 
printf("%s\n",buffer); 
return 0; 
} 


tcp_server.c 
#include<netinet/in.h> 
#include<stdio.h> 
#include<stdlib.h> 
#include<string.h> 
#include<sys/socket.h> 
#include<unistd.h> 
#define PORT 8080 
int main(int args,char const* argv[]) 
{ 
int server_fd,new_socket,valread; 
struct sockaddr_in address; 
int opt=1; 
int addrlen=sizeof(address); 
char buffer[1024]={0}; 
char* hello=" HELLO FROM SERVER "; 
if((server_fd=socket(AF_INET,SOCK_STREAM,0))==0) { 
perror("Socket failed"); 
exit(EXIT_FAILURE); 
} 
if(setsockopt(server_fd,SOL_SOCKET,SO_REUSEADDR| SO_REUSEPORT,&opt,sizeof(opt))) 
{ 
perror("Setsockopt"); 
exit(EXIT_FAILURE); 
} 
address.sin_family=AF_INET; 
address.sin_addr.s_addr=INADDR_ANY; 
address.sin_port=htons(PORT); 
if(bind(server_fd,(struct sockaddr*)&address,sizeof(address))<0) { 
perror("Bind failed"); 
exit(EXIT_FAILURE); 
} 
if(listen(server_fd,3)<0) 
{ 
perror("listen"); 
exit(EXIT_FAILURE); 
} 
if((new_socket=accept(server_fd,(struct sockaddr*)&address, (socklen_t*)&addrlen))<0) 
{
perror("accept"); 
exit(EXIT_FAILURE); 
} 
valread=read(new_socket,buffer,1024); 
printf("%s\n",buffer); 
send(new_socket,hello,strlen(hello),0); 
printf("Hello message sent \n"); 
return 0; 
} 


udp_client.c 
#include<stdio.h> 
#include<stdlib.h> 
#include<unistd.h> 
#include<string.h> 
#include<sys/types.h> 
#include<sys/socket.h> 
#include<arpa/inet.h> 
#include<netinet/in.h> 
#define PORT 8080 
#define MAXLINE 1024 
int main() 
{ 
int sockfd; 
char buffer[MAXLINE]; 
char * hello = "HELLO FROM CLIENT"; 
struct sockaddr_in servaddr; 
if((sockfd=socket(AF_INET,SOCK_DGRAM,0))<0) 
{ 
perror("Socket creation failed"); 
exit(EXIT_FAILURE); 
} 
memset(&servaddr,0,sizeof(servaddr)); 
servaddr.sin_family=AF_INET; 
servaddr.sin_port=htons(PORT); 
servaddr.sin_addr.s_addr=INADDR_ANY; 
int n,len; 
sendto(sockfd,(const char*)hello,strlen(hello),MSG_CONFIRM,(const struct sockaddr*)&servaddr,sizeof(servaddr)); 
printf("Hello message sent\n"); 
n=recvfrom(sockfd,(char*)buffer,MAXLINE,MSG_WAITALL,(struct sockaddr*)&servaddr,&len); 
buffer[n]='\0'; 
printf("Server : %s\n",buffer); 
close(sockfd); 
return 0; 
} 


udp_server.c 
#include<stdio.h> 
#include<stdlib.h> 
#include<unistd.h> 
#include<string.h> 
#include<sys/types.h> 
#include<sys/socket.h> 
#include<arpa/inet.h> 
#include<netinet/in.h> 
#define PORT 8080 
#define MAXLINE 1024 
int main() 
{ 
int sockfd; 
char buffer[MAXLINE]; 
char * hello = "HELLO FROM SERVER"; 
struct sockaddr_in servaddr,cliaddr; 
if((sockfd=socket(AF_INET,SOCK_DGRAM,0))<0) 
{ 
perror("Socket creation failed"); 
exit(EXIT_FAILURE); 
} 
memset(&servaddr,0,sizeof(servaddr)); 
memset(&cliaddr,0,sizeof(cliaddr)); 
servaddr.sin_family=AF_INET; 
servaddr.sin_addr.s_addr=INADDR_ANY; 
servaddr.sin_port=htons(PORT); 
if(bind(sockfd,(const struct sockaddr*)&servaddr,sizeof(servaddr))<0) { 
perror("Bind failed"); 
exit(EXIT_FAILURE); 
}

int n,len; 
len=sizeof(cliaddr); 
n=recvfrom(sockfd,(char*)buffer,MAXLINE,MSG_WAITALL,(struct sockaddr*)&cliaddr,&len); 
buffer[n]='\0'; 
printf("Client : %s\n",buffer); 
sendto(sockfd,(const char*)hello,strlen(hello),MSG_CONFIRM,(const struct sockaddr*)&cliaddr,len); 
printf("Hello message sent\n"); 
return 0; 
}


